package pruebadb.example.dj.com.pruebadb.pruebadb.db;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import pruebadb.example.dj.com.pruebadb.pruebadb.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "TAREA".
 */
@Entity(active = true)
public class Tarea {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String tarea_id;

    @NotNull
    private String descripcion;
    private int duracion;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient TareaDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "idTarea")
    })
    private List<RelacionUsuarioTarea> tareaRef;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "idTarea")
    })
    private List<PermisoTareasUser> tareaPermiso;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Tarea() {
    }

    public Tarea(Long id) {
        this.id = id;
    }

    @Generated
    public Tarea(Long id, String tarea_id, String descripcion, int duracion) {
        this.id = id;
        this.tarea_id = tarea_id;
        this.descripcion = descripcion;
        this.duracion = duracion;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTareaDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getTarea_id() {
        return tarea_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTarea_id(@NotNull String tarea_id) {
        this.tarea_id = tarea_id;
    }

    @NotNull
    public String getDescripcion() {
        return descripcion;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDescripcion(@NotNull String descripcion) {
        this.descripcion = descripcion;
    }

    public int getDuracion() {
        return duracion;
    }

    public void setDuracion(int duracion) {
        this.duracion = duracion;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<RelacionUsuarioTarea> getTareaRef() {
        if (tareaRef == null) {
            __throwIfDetached();
            RelacionUsuarioTareaDao targetDao = daoSession.getRelacionUsuarioTareaDao();
            List<RelacionUsuarioTarea> tareaRefNew = targetDao._queryTarea_TareaRef(id);
            synchronized (this) {
                if(tareaRef == null) {
                    tareaRef = tareaRefNew;
                }
            }
        }
        return tareaRef;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTareaRef() {
        tareaRef = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<PermisoTareasUser> getTareaPermiso() {
        if (tareaPermiso == null) {
            __throwIfDetached();
            PermisoTareasUserDao targetDao = daoSession.getPermisoTareasUserDao();
            List<PermisoTareasUser> tareaPermisoNew = targetDao._queryTarea_TareaPermiso(id);
            synchronized (this) {
                if(tareaPermiso == null) {
                    tareaPermiso = tareaPermisoNew;
                }
            }
        }
        return tareaPermiso;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetTareaPermiso() {
        tareaPermiso = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
