package pruebadb.example.dj.com.pruebadb.pruebadb.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USUARIO".
*/
public class UsuarioDao extends AbstractDao<Usuario, Long> {

    public static final String TABLENAME = "USUARIO";

    /**
     * Properties of entity Usuario.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Nombre = new Property(2, String.class, "nombre", false, "NOMBRE");
        public final static Property Nif = new Property(3, String.class, "nif", false, "NIF");
        public final static Property Pass = new Property(4, String.class, "pass", false, "PASS");
        public final static Property TipoUsuario = new Property(5, String.class, "tipoUsuario", false, "TIPO_USUARIO");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property Direccion = new Property(7, String.class, "direccion", false, "DIRECCION");
        public final static Property Cp = new Property(8, String.class, "cp", false, "CP");
        public final static Property Ciudad = new Property(9, String.class, "ciudad", false, "CIUDAD");
    }

    private DaoSession daoSession;


    public UsuarioDao(DaoConfig config) {
        super(config);
    }
    
    public UsuarioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USUARIO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT NOT NULL ," + // 1: user_id
                "\"NOMBRE\" TEXT NOT NULL ," + // 2: nombre
                "\"NIF\" TEXT NOT NULL ," + // 3: nif
                "\"PASS\" TEXT NOT NULL ," + // 4: pass
                "\"TIPO_USUARIO\" TEXT NOT NULL ," + // 5: tipoUsuario
                "\"EMAIL\" TEXT," + // 6: email
                "\"DIRECCION\" TEXT," + // 7: direccion
                "\"CP\" TEXT," + // 8: cp
                "\"CIUDAD\" TEXT);"); // 9: ciudad
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USUARIO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Usuario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUser_id());
        stmt.bindString(3, entity.getNombre());
        stmt.bindString(4, entity.getNif());
        stmt.bindString(5, entity.getPass());
        stmt.bindString(6, entity.getTipoUsuario());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String direccion = entity.getDireccion();
        if (direccion != null) {
            stmt.bindString(8, direccion);
        }
 
        String cp = entity.getCp();
        if (cp != null) {
            stmt.bindString(9, cp);
        }
 
        String ciudad = entity.getCiudad();
        if (ciudad != null) {
            stmt.bindString(10, ciudad);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Usuario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUser_id());
        stmt.bindString(3, entity.getNombre());
        stmt.bindString(4, entity.getNif());
        stmt.bindString(5, entity.getPass());
        stmt.bindString(6, entity.getTipoUsuario());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String direccion = entity.getDireccion();
        if (direccion != null) {
            stmt.bindString(8, direccion);
        }
 
        String cp = entity.getCp();
        if (cp != null) {
            stmt.bindString(9, cp);
        }
 
        String ciudad = entity.getCiudad();
        if (ciudad != null) {
            stmt.bindString(10, ciudad);
        }
    }

    @Override
    protected final void attachEntity(Usuario entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Usuario readEntity(Cursor cursor, int offset) {
        Usuario entity = new Usuario( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // user_id
            cursor.getString(offset + 2), // nombre
            cursor.getString(offset + 3), // nif
            cursor.getString(offset + 4), // pass
            cursor.getString(offset + 5), // tipoUsuario
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // direccion
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cp
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // ciudad
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Usuario entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.getString(offset + 1));
        entity.setNombre(cursor.getString(offset + 2));
        entity.setNif(cursor.getString(offset + 3));
        entity.setPass(cursor.getString(offset + 4));
        entity.setTipoUsuario(cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDireccion(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCp(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCiudad(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Usuario entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Usuario entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Usuario entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
