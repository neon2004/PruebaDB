package pruebadb.example.dj.com.pruebadb.pruebadb.db;

import org.greenrobot.greendao.annotation.*;

import java.io.Serializable;
import java.util.List;
import pruebadb.example.dj.com.pruebadb.pruebadb.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "USUARIO".
 */
@Entity(active = true)
public class Usuario implements Serializable{

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String user_id;

    @NotNull
    private String nombre;

    @NotNull
    private String nif;

    @NotNull
    private String pass;

    @NotNull
    private String tipoUsuario;
    private String email;
    private String direccion;
    private String cp;
    private String ciudad;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient UsuarioDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "idUser")
    })
    private List<RelacionUsuarioTarea> userRef;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "idUser")
    })
    private List<PermisoTareasUser> userPermiso;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Usuario() {
    }

    public Usuario(Long id) {
        this.id = id;
    }

    @Generated
    public Usuario(Long id, String user_id, String nombre, String nif, String pass, String tipoUsuario, String email, String direccion, String cp, String ciudad) {
        this.id = id;
        this.user_id = user_id;
        this.nombre = nombre;
        this.nif = nif;
        this.pass = pass;
        this.tipoUsuario = tipoUsuario;
        this.email = email;
        this.direccion = direccion;
        this.cp = cp;
        this.ciudad = ciudad;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUsuarioDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getUser_id() {
        return user_id;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUser_id(@NotNull String user_id) {
        this.user_id = user_id;
    }

    @NotNull
    public String getNombre() {
        return nombre;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNombre(@NotNull String nombre) {
        this.nombre = nombre;
    }

    @NotNull
    public String getNif() {
        return nif;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNif(@NotNull String nif) {
        this.nif = nif;
    }

    @NotNull
    public String getPass() {
        return pass;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPass(@NotNull String pass) {
        this.pass = pass;
    }

    @NotNull
    public String getTipoUsuario() {
        return tipoUsuario;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTipoUsuario(@NotNull String tipoUsuario) {
        this.tipoUsuario = tipoUsuario;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getDireccion() {
        return direccion;
    }

    public void setDireccion(String direccion) {
        this.direccion = direccion;
    }

    public String getCp() {
        return cp;
    }

    public void setCp(String cp) {
        this.cp = cp;
    }

    public String getCiudad() {
        return ciudad;
    }

    public void setCiudad(String ciudad) {
        this.ciudad = ciudad;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<RelacionUsuarioTarea> getUserRef() {
        if (userRef == null) {
            __throwIfDetached();
            RelacionUsuarioTareaDao targetDao = daoSession.getRelacionUsuarioTareaDao();
            List<RelacionUsuarioTarea> userRefNew = targetDao._queryUsuario_UserRef(id);
            synchronized (this) {
                if(userRef == null) {
                    userRef = userRefNew;
                }
            }
        }
        return userRef;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetUserRef() {
        userRef = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<PermisoTareasUser> getUserPermiso() {
        if (userPermiso == null) {
            __throwIfDetached();
            PermisoTareasUserDao targetDao = daoSession.getPermisoTareasUserDao();
            List<PermisoTareasUser> userPermisoNew = targetDao._queryUsuario_UserPermiso(id);
            synchronized (this) {
                if(userPermiso == null) {
                    userPermiso = userPermisoNew;
                }
            }
        }
        return userPermiso;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetUserPermiso() {
        userPermiso = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
